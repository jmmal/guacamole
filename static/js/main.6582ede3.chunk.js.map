{"version":3,"sources":["Shared/Helpers.ts","Shared/Loading.tsx","Shared/Mapbox.tsx","Activities/ActivityPreview.tsx","Activities/ActivityService.ts","Activities/ActivityList.tsx","Charts/ElevationChart.tsx","Charts/PaceChart.tsx","Charts/SplitsChart.tsx","Activities/DetailedActivity.tsx","Activities/Upload.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Helpers","value","totalMinutes","Math","floor","totalHours","seconds","minutes","padStart","Loading","className","role","Mapbox","bounds","polyline","mapContainer","useRef","useEffect","setupMap","map","mapboxgl","container","current","style","minLng","minLat","maxLng","maxLat","fitBoundsOptions","padding","top","bottom","left","right","accessToken","process","addControl","coords","mapboxPoly","on","addSource","type","data","properties","geometry","coordinates","addLayer","id","source","layout","paint","ref","ActivityPreview","activity","history","useHistory","openActivity","push","tabIndex","onClick","onKeyDown","event","key","format","Date","startTime","title","src","image","alt","Number","distance","toFixed","pace","maxElevation","minElevation","elapsedTime","FooterColumn","baseUrl","ActivityService","pageNumber","pageSize","filter","axios","get","params","file","formData","FormData","append","name","post","url","ActivityList","useState","activities","setActivities","totalCount","setTotalCount","page","setPage","setFilters","updateActivities","count","getActivities","then","resp","results","dataLength","length","next","hasMore","loader","ElevationChart","points","point","distanceFromStart","elevation","height","width","margin","strokeDasharray","dataKey","allowDecimals","tickCount","unit","minTickGap","isAnimationActive","stroke","fill","PaceChart","SplitsChart","currentSplit","time","forEach","i","getTime","lastPoint","dist","calculateSplits","DetailedActivity","activityId","useParams","setActivity","setPoints","response","goBack","Upload","setFile","onChange","uploadedFile","target","files","item","htmlFor","disabled","Activities","path","useRouteMatch","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6582ede3.chunk.js","sourcesContent":["export const Helpers = {\n  /**\n   * Converts value (representing a duration in seconds) into a string formatted \n   * as hh mm ss\n   * e.g. 1h 28m or 28m 10s\n   */\n  duration: (value: number): string => {\n    const totalMinutes = Math.floor(value / 60);\n    const totalHours = Math.floor(totalMinutes / 60);\n    const seconds = value - totalMinutes * 60;\n\n    if (totalHours >= 1) {\n      return `${totalHours}h ${totalMinutes % 60}m`;\n    }\n\n    return `${totalMinutes}m ${seconds}s`;\n  },\n\n  /**\n   * Converts a number value (representing a speed in m/s) into a string representation\n   * of the value in Minutes / Kilometer\n   */\n  pace: (value: number): string => {\n    const minutes = Math.floor(value / 60);\n    const seconds = `${Math.floor(value - (minutes * 60))}`;\n\n    return `${minutes}:${seconds.padStart(2, '0')}`;\n  }\n}","import React from 'react';\nimport '../styles/styles.scss'\n\nexport const Loading = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"spinner-grow text-warning\" role=\"status\"></div>\n      <div className=\"spinner-grow text-success\" role=\"status\"></div>\n      <div className=\"spinner-grow text-info\" role=\"status\"></div>\n    </div>\n  )\n}","import React, { useEffect, useRef } from 'react';\n\nimport * as mapboxgl from 'mapbox-gl';\nimport * as mapboxPoly from '@mapbox/polyline';\n\nimport { Bounds } from '../Activities/models';\n\ntype MapboxProps = {\n  bounds: Bounds;\n  polyline: string;\n}\n\nexport const Mapbox = ({ bounds, polyline }: MapboxProps) => {\n  const mapContainer = useRef(null);\n\n  useEffect(() => {\n    setupMap();\n  });\n\n  const setupMap = (): void => {\n    const map = new mapboxgl.Map({\n      container: mapContainer.current || '',\n      style: 'mapbox://styles/mapbox/outdoors-v11',\n      bounds: new mapboxgl.LngLatBounds(\n        new mapboxgl.LngLat(\n          bounds.minLng,\n          bounds.minLat\n        ),\n        new mapboxgl.LngLat(\n          bounds.maxLng,\n          bounds.maxLat\n        )\n      ),\n      fitBoundsOptions: {\n        padding: {\n          top: 40,\n          bottom: 40,\n          left: 40,\n          right: 40,\n        },\n      },\n      accessToken: process.env.REACT_APP_MAPBOX_PUBLIC_KEY,\n    });\n\n    // Add map controls\n    map.addControl(new mapboxgl.NavigationControl());\n\n    const coords = mapboxPoly.toGeoJSON(polyline);\n\n    map.on('load', () => {\n      map.addSource('route', {\n        type: 'geojson',\n        data: {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'LineString',\n            coordinates: coords.coordinates,\n          },\n        },\n      });\n      map.addLayer({\n        id: 'route',\n        type: 'line',\n        source: 'route',\n        layout: {\n          'line-join': 'round',\n          'line-cap': 'round',\n        },\n        paint: {\n          'line-color': '#008DD5',\n          'line-width': 4,\n        },\n      });\n    });\n  }\n\n  return (\n    <div ref={mapContainer} className=\"map match-parent\"></div>\n  )\n}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { format } from 'date-fns';\n\nimport { Activity } from './models';\nimport { Helpers } from '../Shared';\nimport '../styles/styles.scss'\n\ntype ActivityPreviewProps = {\n  activity: Activity;\n}\n\nexport const ActivityPreview = ({ activity }: ActivityPreviewProps) => {\n  const history = useHistory();\n\n  function openActivity() {\n    history.push(`/activities/${activity.id}`);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent) {\n    if (event.key === \"ENTER\") {\n      openActivity()\n    }\n  }\n\n  return (\n    <div className=\"activity__preview focusable\" tabIndex={0} onClick={openActivity} onKeyDown={handleKeyDown}>\n      <div className=\"header\">\n        <h3 className=\"date mb-0\">{ format(new Date(activity.startTime), \"EEEE, LLLL d, yyyy\") }</h3>\n        <p className=\"title mb-0\">{ activity.title }</p>\n      </div>\n      \n      <img\n        src={'data:image/png;base64,' + activity.image}\n        alt=\"Activity GPS preview\"\n        className=\"map-image\"\n      />\n\n      <div className=\"stats-footer\">\n        <FooterColumn title='Distance' value={ `${Number(activity.distance / 1000).toFixed(2)} km`} />\n        <FooterColumn title='Pace' value={ `${Helpers.pace(activity.pace) } min / km`} />\n        <FooterColumn title='Elevation' value={`${Number(activity.maxElevation - activity.minElevation).toFixed(1)} m`} />\n        <FooterColumn title='Elapsed Time' value={ Helpers.duration(activity.elapsedTime)} />\n      </div>\n    </div>\n  )\n}\n\ntype FooterColumnProps = {\n  title: string;\n  value: string;\n}\n\nconst FooterColumn = ({title, value}: FooterColumnProps) => {\n  return (\n    <div className=\"col\">\n      <p className=\"title\">{ title }</p>\n      <p className=\"value mb-0\">{ value }</p>\n    </div>\n  )\n}","import axios from 'axios';\nimport { GetAllResponse, PointResponse, ActivityTypeAggregation, Activity } from './models';\n\nvar baseUrl = 'http://localhost:8080';\n\nexport const ActivityService = {\n  getAllActivities: (pageNumber: number, pageSize: number, filter: string | null = null) => {\n    return axios.get<GetAllResponse>(baseUrl + '/activities', {\n      params: {\n        pageNumber: pageNumber,\n        pageSize: pageSize,\n        type: filter\n      }\n    })\n  },\n\n  getActivity: (id: string) => {\n    return axios.get<Activity>(baseUrl + '/activities/' + id)\n  },\n\n  upload: (file: File) => {\n    const formData = new FormData();\n    formData.append('file', file, file.name);\n    return axios.post(baseUrl + '/upload', formData);\n  },\n\n  getFilters: () => {\n    const url = baseUrl + '/filters';\n\n    return axios.get<ActivityTypeAggregation[]>(url);\n  },\n\n  getPoints: (id: string) => {\n    const url = baseUrl + '/activities/' + id + '/points';\n\n    return axios.get<PointResponse>(url);\n  }\n}","import React, { useEffect, useState, ChangeEvent } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { ReactComponent as CloudIcon } from 'bootstrap-icons/icons/cloud-upload.svg';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nimport { ActivityPreview } from './ActivityPreview';\nimport { ActivityService } from './ActivityService';\n\nimport { Activity, ActivityTypeAggregation } from './models';\nimport { Loading } from '../Shared';\n\nexport const ActivityList = () => {\n  const history = useHistory()\n  const [activities, setActivities] = useState<Array<Activity>>([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState<Array<ActivityTypeAggregation>>([]);\n\n  useEffect(() => {\n    getActivities(page, null).then(resp => {\n      updateActivities(resp.data.results, resp.data.totalCount)\n    })\n\n    ActivityService.getFilters().then(resp => {\n      setFilters(resp.data);\n    })\n  }, []);\n\n  function updateActivities(activities: Activity[], count: number) {\n    setTotalCount(count);\n    setActivities(activities);\n  }\n\n  function getActivities(pageNumber: number = 1, filter: string | null) {\n    return ActivityService.getAllActivities(pageNumber, 3, filter);\n  }\n\n  function handleFilterChange(event: ChangeEvent<HTMLSelectElement>) {\n    const filter = event.target.value;\n  }\n\n  function loadNext() {\n    getActivities(page + 1, null).then(resp => {\n      updateActivities([\n        ...activities,\n        ...resp.data.results\n      ], resp.data.totalCount);\n      setPage(page + 1);\n    })\n  }\n\n  function onUploadClick() {\n    history.push('/activities/upload')\n  }\n\n  return (\n    <div className=\"activity__list-wrapper\">\n      <div className=\"activity__list\">\n        <div className=\"options\">\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-secondary upload-btn\"\n            onClick={onUploadClick}\n          >Upload <CloudIcon />\n          </button>\n          {/* <select\n            className=\"form-select type-filters\"\n            aria-label=\"Default select example\"\n            onChange={handleFilterChange}\n          >\n            <option value='All'>Filter by: All</option>\n            { filters && filters.map(filter => (\n              <option key={filter.Name} value={filter.Name}>{ filter.Name } ({filter.Total})</option>\n            ))}\n          </select> */}\n        </div>\n        <InfiniteScroll\n          dataLength={activities.length}\n          next={loadNext}\n          hasMore={activities.length < totalCount}\n          loader={<Loading />}\n        >\n          { activities.map(activity => (\n            <ActivityPreview \n              key={activity.id}\n              activity={activity}\n            />\n          ))}\n        </InfiniteScroll>\n      </div>\n    </div>\n  )\n}","import React from 'react';\n\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Point } from '../Activities/models';\n\ntype ElevationChartProps = {\n  points: Point[]\n}\n\nexport const ElevationChart = ({ points }: ElevationChartProps) => {\n  const data = points.map(point => {\n    return {\n      // TODO: Maybe be better to label with time\n      distance: Number(point.distanceFromStart / 1000).toFixed(1),\n      elevation: Number(point.elevation).toFixed(1)\n    };\n  });\n\n  return (\n    <ResponsiveContainer height={250} width='100%'>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 10, right: 30, left: 0, bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"distance\" allowDecimals={false} tickCount={4} unit={'km'} minTickGap={20} />\n        <YAxis allowDecimals={false} unit={'m'} />\n        <Tooltip />\n        <Area isAnimationActive={false} type=\"monotone\" dataKey=\"elevation\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}","import React from 'react';\n\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Point } from '../Activities/models';\n\ntype PaceChartProps = {\n  points: Point[]\n}\n\nexport const PaceChart = ({ points }: PaceChartProps) => {\n  const data = points.map(point => {\n    return {\n      distance: Number(point.distanceFromStart / 1000).toFixed(1),\n      pace: Number(point.pace).toFixed(2)\n    };\n  })\n  return (\n    <ResponsiveContainer height={250} width='100%'>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 10, right: 30, left: 0, bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"distance\" allowDecimals={false} tickCount={4} unit={'km'} minTickGap={20} />\n        <YAxis allowDecimals={false} unit={'m/s'} />\n        <Tooltip />\n        <Area isAnimationActive={false} type=\"monotone\" dataKey=\"pace\" stroke=\"#5293fa\" fill=\"#5293fa\" />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}","import React from 'react';\n\nimport {\n  Bar,\n  BarChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Point } from '../Activities/models';\n\ntype SplitsChartProps = {\n  points: Point[]\n}\n\nexport const SplitsChart = ({ points }: SplitsChartProps) => {\n  const data = calculateSplits(points);\n\n  function calculateSplits(points: Point[]) {\n    const data: object[] = [];\n\n    if (!points.length || points.length === 0) { return data; }\n\n    let currentSplit = 1; // 1st KM\n    let startTime = points[0].time;\n\n    points.forEach((point, i) => {\n      if (point.distanceFromStart < (currentSplit * 1000)) {\n        return;\n      }\n\n      const seconds = (new Date(point.time).getTime() - new Date(startTime).getTime()) / 1000;\n\n      data.push({\n        name: currentSplit,\n        value: Number(1000 / seconds).toFixed(4)\n      });\n      currentSplit++;\n      startTime = point.time;\n    });\n\n    const lastPoint = points[points.length - 1];\n    const seconds = (new Date(lastPoint.time).getTime() - new Date(startTime).getTime()) / 1000;\n\n    const dist = lastPoint.distanceFromStart - (1000 * (currentSplit - 1));\n\n    // If the last split is less than 100m, ignore it\n    if (dist < 100) {\n      return data;\n    }\n\n    data.push({\n      name: currentSplit,\n      value: Number(seconds / dist).toFixed(2)\n    });\n\n    return data;\n  }\n\n  return (\n    <ResponsiveContainer height={250} width='100%'>\n      <BarChart data={data} >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"value\" fill=\"#6fd450\" />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport {\n  ReactComponent as ChevronLeft\n} from 'bootstrap-icons/icons/chevron-left.svg';\nimport { format } from 'date-fns';\n\nimport { Mapbox } from '../Shared';\nimport { ActivityService } from './ActivityService';\nimport { Activity, PointResponse, Point } from './models';\nimport { Loading } from '../Shared';\nimport { ElevationChart, PaceChart, SplitsChart } from '../Charts';\n\nexport const DetailedActivity = () => {\n  const history = useHistory();\n  const { activityId } = useParams();\n\n  const [ activity, setActivity ] = useState<Activity>();\n  const [ points, setPoints ] = useState<Point[]>([]);\n\n  useEffect(() => {\n    ActivityService\n      .getActivity(activityId)\n      .then(response => {\n        setActivity(response.data)\n      });\n  }, [ activityId ]);\n\n  useEffect(() => {\n    ActivityService.getPoints(activityId)\n      .then(response => {\n        setPoints(response.data.points);\n      })\n  }, [activityId]);\n\n  function goBack() {\n    history.goBack();\n  }\n  \n  return (\n    <div className=\"activity-component\">\n      <div className=\"header-detail\">\n        <button type=\"button\" className=\"btn btn-outline-dark btn-sm\" onClick={goBack}><ChevronLeft /> Activities</button>\n        <h4 className=\"activity-type mb-0\">{ activity?.type ? activity.type : 'Loading' }</h4>\n      </div>\n       \n      { (activity && points) ? (\n        <div className=\"detail-activity\">\n          <p className=\"lead\">{ `${format(new Date(activity.startTime), 'HH:mm')} on ${format(new Date(activity.startTime), 'EEEE, LLLL d, yyyy')}`}</p>\n          <Mapbox bounds={ activity.bounds } polyline={ activity.polyline } />\n\n          <h3 className=\"el-text mt-3\">Elevation</h3>\n          <ElevationChart points={points} />\n\n          <h3 className=\"el-text mt-3\">Pace</h3>\n          <PaceChart points={points} />   \n\n          <h3 className=\"el-text mt-3\">Splits</h3>\n          <SplitsChart points={points} />        \n        </div>\n      ) : <Loading />}\n    </div>\n  )\n}","import React, { useState } from 'react';\nimport { ActivityService } from './ActivityService';\nimport { useHistory } from 'react-router-dom';\n\nexport const Upload = () => {\n  const history = useHistory();\n  const [file, setFile] = useState<File>();\n\n  function handleFileInput(event: React.ChangeEvent<HTMLInputElement>) {\n    const uploadedFile = event.target.files?.item(0);\n\n    if (uploadedFile) {\n      setFile(uploadedFile);\n    }\n  }\n\n  function handleSubmit(): void {\n    if (file) {\n      ActivityService\n        .upload(file)\n        .then(resp => {\n          history.push('/activities');\n        })\n\n    }\n  }\n\n  return (\n    <div className=\"upload-container\">\n      <div className=\"upload\">\n        <h2 id=\"inputGroupFileAddon01\">Upload</h2>\n        \n        <p>Accepted file types: '.gpx'</p>\n        <div className=\"form-file\">\n          <input\n            type=\"file\"\n            name=\"file\"\n            id=\"fileInput\"\n            className=\"form-file-input\"\n            onChange={handleFileInput}\n          />\n          \n          <label className=\"form-file-label\" htmlFor=\"fileInput\">\n            <span\n              className=\"form-file-text\"\n            >\n              {file ? file.name : 'Select a GPX file to upload' }\n            </span>\n            <span className=\"form-file-button\">Browse</span>\n          </label>\n        </div>\n        \n        <div className=\"upload-actions\">\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-secondary back\"\n            onClick={() => history.push('/activities')}\n          >Go Back</button>\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={handleSubmit}\n            disabled={!!!file}\n          >Submit</button>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useRouteMatch\n} from 'react-router-dom';\n\nimport './App.scss';\nimport './styles/styles.scss';\n\nimport { \n  DetailedActivity,\n  ActivityList,\n  Upload\n} from './Activities';\n\nfunction App() {\n  return (\n    <div className=\"content-wrapper\">\n      <Router>\n        <Switch>\n          <Route path='/activities'>\n            <Activities />\n          </Route>\n          <Route path='/'>\n            <Activities />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nconst Activities = () => {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route exact path={path}>\n        <ActivityList />\n      </Route>\n      <Route path={`${path}/upload`}>\n        <Upload />\n      </Route>\n      <Route path={`${path}/:activityId`}>\n        <DetailedActivity />\n      </Route>\n    </Switch>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}