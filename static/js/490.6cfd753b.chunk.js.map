{"version":3,"file":"static/js/490.6cfd753b.chunk.js","mappings":"+OAAaA,EAAQ,SAACC,EAAcC,GAElC,IADA,IAAMC,EAAS,GACNC,EAAIH,EAAMG,GAAKF,EAAIE,IAC1BD,EAAOE,KAAKD,GAEd,OAAOD,G,UCYIG,EAAiB,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,SACjCC,EAAOF,EACVG,QAAO,SAACC,GACP,OAAOA,EAAMC,UAAYD,EAAMH,YAEhCK,KAAI,SAACF,GACJ,IAAMG,EAAYH,EAAMC,SAClBJ,EAAWG,EAAMH,SAEvB,MAAO,CAELA,SAAUO,OAAOP,EAAW,KAAMQ,QAAQ,GAC1CF,UAAWC,OAAOD,GAAWE,QAAQ,OAIrCC,EAAQjB,EAAM,EAAGQ,EAAW,KAUlC,OACE,SAACU,EAAA,EAAD,CAAqBC,OAAQ,IAAKC,MAAM,OAAxC,UACE,UAACC,EAAA,EAAD,CACEZ,KAAMA,EACNa,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GANZ,WASE,SAACC,EAAA,EAAD,CAAeC,gBAAgB,SAC/B,SAACC,EAAA,EAAD,CAAOC,QAAQ,WAAWb,MAAOA,EAAOc,KAAM,KAAMC,SAAU,KAC9D,SAACC,EAAA,EAAD,CAAOC,eAAe,EAAOH,KAAM,OACnC,SAACI,EAAA,EAAD,CACEC,eAvBmB,SAACC,GAC1B,MAAM,aAAN,OAAoBA,EAApB,OAuBMC,UApBe,SAACD,GACtB,MAAM,GAAN,OAAUA,EAAV,SAqBI,SAACE,EAAA,EAAD,CACEC,mBAAmB,EACnBC,KAAK,WACLX,QAAQ,YACRY,OAAO,UACPC,KAAK,kB,uCC/CFC,EAAY,SAAC,GAAgC,IACpDnC,EADmD,EAA7BF,OAEvBG,QAAO,SAACC,GACP,OAAOA,EAAMH,UAAYG,EAAMkC,SAEhChC,KAAI,SAACF,GACJ,MAAO,CACLH,SAAUO,OAAQJ,EAAMH,SAAsB,KAAMQ,QAAQ,GAC5D8B,KAV8C,mBAWI/B,OAAOJ,EAAMkC,WAIrEpC,EA+BF,SAAwBA,GACtB,OAAOA,EAAKC,QAAO,SAACC,GAAD,OAAWA,EAAMmC,MAAQ,MAhCrCC,CAAetC,GAEtB,IAAMuC,GAAeC,EAAAA,EAAAA,cAAY,SAACZ,GAChC,IAAMa,EAAU,GAAJb,EACZ,MAAM,GAAN,QAAUc,EAAAA,EAAAA,IAAWD,GAArB,eACC,IACGE,GAAiBH,EAAAA,EAAAA,cAAY,SAACZ,GAClC,MAAM,GAAN,OAAUA,EAAV,QACC,IAEH,OACE,SAACnB,EAAA,EAAD,CAAqBC,OAAQ,IAAKC,MAAM,OAAxC,UACE,UAACiC,EAAA,EAAD,CACE5C,KAAMA,EACNa,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GANZ,WASE,SAACC,EAAA,EAAD,CAAeC,gBAAgB,SAC/B,SAACC,EAAA,EAAD,CAAOC,QAAQ,WAAWC,KAAM,QAChC,SAACE,EAAA,EAAD,CAAOC,eAAe,EAAOoB,UAAQ,KACrC,SAACnB,EAAA,EAAD,CAASG,UAAWU,EAAcZ,eAAgBgB,KAClD,SAACG,EAAA,EAAD,CAAMd,KAAK,WAAWX,QAAQ,OAAOY,OAAO,UAAUc,KAAK,U,wBCxC7DC,EAAgD,IAAO,GAEhDC,EAAc,SAAC,GAAkC,IACtDjD,EAEN,SAAyBF,GACvB,IAAME,EAAiB,GAEvB,IAAKF,EAAOoD,QAA4B,IAAlBpD,EAAOoD,OAC3B,OAAOlD,EAGT,IAAImD,EAAe,EACfC,EAAYtD,EAAO,GAAGuD,KAETvD,EAAOG,QAAO,SAACC,GAC9B,OAAOA,EAAMH,UAAYG,EAAMmD,QAGxBC,SAAQ,SAACpD,EAAOP,GACvB,KAAIO,EAAMH,SAA2B,IAAfoD,GAAtB,CAIA,IAAMI,GACH,IAAIC,KAAKtD,EAAMmD,MAAOI,UAAY,IAAID,KAAKJ,GAAWK,WACvD,IAEFzD,EAAKJ,KAAK,CACR8D,KAAMP,EACNQ,MACEX,EACA1C,OAAO,IAAOiD,KAElBJ,IACAC,EAAYlD,EAAMmD,SAGpB,IAAMO,EAAY9D,EAAOA,EAAOoD,OAAS,GACnCK,GACH,IAAIC,KAAKI,EAAUP,MAAOI,UAAY,IAAID,KAAKJ,GAAWK,WAC3D,IAEII,EAAQD,EAAU7D,SAAuB,KAAQoD,EAAe,GAGtE,GAAIU,EAAO,IACT,OAAO7D,EAST,OANAA,EAAKJ,KAAK,CACR8D,KAAMP,EACNQ,MACEX,EAAgD1C,OAAOuD,EAAON,KAG3DvD,EArDI8D,CAD8C,EAA/BhE,QAyD5B,IAAMyC,GAAeC,EAAAA,EAAAA,cAAY,SAACZ,GAChC,IAAMa,EAAU,GAAJb,EACZ,MAAM,GAAN,QAAUc,EAAAA,EAAAA,IAAWD,GAArB,eACC,IAEH,OACE,SAAChC,EAAA,EAAD,CAAqBC,OAAQ,IAAKC,MAAM,OAAxC,UACE,UAACoD,EAAA,EAAD,CAAU/D,KAAMA,EAAhB,WACE,SAACkB,EAAA,EAAD,CAAeC,gBAAgB,SAC/B,SAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOC,KAAK,QAC3B,SAACE,EAAA,EAAD,KACA,SAACE,EAAA,EAAD,CAASC,eAAgB,SAACC,GAAD,gBAAUA,EAAV,OAAiBC,UAAWU,KACrD,SAACyB,EAAA,EAAD,CAAK3C,QAAQ,QAAQa,KAAK,kBCrErB+B,EAAiB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,WAAYnE,EAAsB,EAAtBA,SACrCC,EAAOkE,EACVjE,QAAO,SAACC,GACP,OAAY,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOiE,aAAP,OAAoBjE,QAApB,IAAoBA,OAApB,EAAoBA,EAAOH,aAEnCK,KAAI,SAACF,GACJ,MAAO,CACLH,UAAWO,OAAOJ,EAAMH,SAAY,KAAMQ,QAAQ,GAClD4D,UAAWjE,EAAMiE,cAIjB3D,EAAQjB,EAAM,EAAGe,OAAOP,EAAW,MAEnCqE,GAAqB5B,EAAAA,EAAAA,cAAY,SAACZ,GACtC,MAAM,aAAN,OAAoBA,EAApB,QACC,IAEGyC,GAAiB7B,EAAAA,EAAAA,cAAY,SAACZ,GAClC,MAAM,GAAN,OAAUA,EAAV,SACC,IAEH,OACE,8BACG5B,IACC,SAACS,EAAA,EAAD,CAAqBC,OAAQ,IAAKC,MAAM,OAAxC,UACE,UAACC,EAAA,EAAD,CACEZ,KAAMA,EACNa,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GANZ,WASE,SAACC,EAAA,EAAD,CAAeC,gBAAgB,SAC/B,SAACC,EAAA,EAAD,CAAOC,QAAQ,WAAWC,KAAM,KAAMd,MAAOA,KAC7C,SAACgB,EAAA,EAAD,CAAOC,eAAe,KACtB,SAACC,EAAA,EAAD,CACEC,eAAgByC,EAChBvC,UAAWwC,KAEb,SAACvC,EAAA,EAAD,CACEC,mBAAmB,EACnBC,KAAK,WACLX,QAAQ,YACRY,OAAO,UACPC,KAAK,oB,kDC9CboC,GAAYC,EAAAA,EAAAA,IAAgB,CAChCC,YAAa,CACXC,QAAS,eAkIb,EA9HyB,SAAC,GAGI,IAF5BC,EAE2B,EAF3BA,SACAC,EAC2B,EAD3BA,aAEMC,EAAMN,IAEZ,OACE,UAACO,EAAA,EAAD,CAAKC,SAAS,QAAQjE,OAAO,OAAOH,OAAO,OAA3C,WACE,SAACmE,EAAA,EAAD,CACEE,GAAG,iBACHC,kBAAkB,iBAClBC,kBAAmB,EACnBC,kBAAkB,QAClBC,GAAI,CACFC,SAAU,SACVtE,IAAK,EACLuE,OAAQ,IACRZ,QAAS,OACTa,QAAS,OACTC,eAAgB,UAXpB,UAcE,UAACV,EAAA,EAAD,CACEM,GAAI,CACFG,QAAS,OACTE,oBAAqB,eACrBD,eAAgB,SAChBT,SAAU,QACVnE,MAAO,QANX,WASE,0BACE,UAAC8E,EAAA,EAAD,CAAQC,QAASf,EAAjB,WACE,SAAC,MAAD,IADF,mBAKF,SAACgB,EAAA,EAAD,CACEC,GAAG,KACHT,GAAI,CACFtE,OAAQ,OACRgF,YAAa,EACbC,SAAU,GALd,SAQW,OAARpB,QAAQ,IAARA,GAAAA,EAAU1C,KAAO0C,EAAS1C,KAAO,kBAK/B,OAAR0C,QAAQ,IAARA,OAAA,EAAAA,EAAUqB,YAAY,SAAC,IAAD,CAAQA,SAAUrB,EAASqB,WACjDrB,GAAYA,EAASR,YACpB,iCACE,SAACyB,EAAA,EAAD,CACER,GAAI,CACFW,SAAU,EACVE,UAAW,EACXC,aAAc,GAJlB,oBAMKC,EAAAA,EAAAA,GACH,IAAI1C,KAAKkB,EAAStB,WAClB,sBARF,gBASQ8C,EAAAA,EAAAA,GAAO,IAAI1C,KAAKkB,EAAStB,WAAY,iBAE7C,SAACuC,EAAA,EAAD,CACER,GAAI,CACFW,SAAU,EACVE,UAAW,EACXC,aAAc,EACdE,UAAW,UALf,yBAUA,SAAClC,EAAD,CACEC,WAAYQ,EAASR,WACrBnE,SAAU2E,EAAS3E,YAGrB,SAAC4F,EAAA,EAAD,CACER,GAAI,CACFW,SAAU,EACVE,UAAW,EACXC,aAAc,EACdE,UAAW,UALf,wBAUA,SAACtG,EAAD,CACEC,OAAQ4E,EAASR,WACjBnE,SAAU2E,EAAS3E,YAGrB,SAAC4F,EAAA,EAAD,CACER,GAAI,CACFW,SAAU,EACVE,UAAW,EACXC,aAAc,EACdE,UAAW,UALf,mBAUA,SAAChE,EAAD,CAAWrC,OAAQ4E,EAASR,cAE5B,SAACyB,EAAA,EAAD,CACER,GAAI,CACFW,SAAU,EACVE,UAAW,EACXC,aAAc,EACdE,UAAW,UAEbC,UAAWxB,EAAIJ,YAPjB,qBAWA,SAACvB,EAAD,CAAanD,OAAQ4E,EAASR,iBAGhC,SAAC,IAAD,S,8GC9IFI,GAAYC,EAAAA,EAAAA,IAAgB,CAChC8B,UAAW,CACT1F,MAAO,OACP2E,QAAS,OACTC,eAAgB,SAChB1E,OAAQ,YAICyF,EAAU,WACrB,IAAM1B,EAAMN,IAEZ,OACE,gBAAK8B,UAAWxB,EAAIyB,UAApB,UACE,SAACE,EAAA,EAAD,CAASC,KAAK,a,gDCcdlC,GAAYC,EAAAA,EAAAA,IAAgB,CAChCnE,IAAK,CACHM,OAAQ,WAQC+F,EAAS,SAAC,GAA+B,IAA7BV,EAA4B,EAA5BA,SACjBW,GAAeC,EAAAA,EAAAA,QAAO,MACtB/B,EAAMN,IACNsC,GAAQC,EAAAA,EAAAA,MAERC,GAAWtE,EAAAA,EAAAA,cAAY,WAC3B,IAAMuE,EAAUC,EAAAA,UAAqBjB,GAC/BkB,EAnCa,SAACC,GACtB,IAAMC,EAAO,CACX7G,OAAO8G,kBACP9G,OAAO8G,kBACP9G,OAAO+G,kBACP/G,OAAO+G,mBAGT,OAAOH,EAAOI,QAAO,SAACC,EAAMC,GAC1B,MAAO,CACLC,KAAKC,IAAIF,EAAM,GAAID,EAAK,IACxBE,KAAKC,IAAIF,EAAM,GAAID,EAAK,IACxBE,KAAKE,IAAIH,EAAM,GAAID,EAAK,IACxBE,KAAKE,IAAIH,EAAM,GAAID,EAAK,OAEzBJ,GAoBcS,CAAeb,EAAQc,aAChCC,EACgB,UAApBlB,EAAMmB,UACF,kCACA,sCAEA3H,EAAM,IAAI4H,IAAAA,KAAa,CAC3B3B,UAAWK,EAAauB,SAAW,GACnCC,MAAOJ,EACPb,OAAQ,IAAIe,IAAAA,cAAsBf,GAClCkB,iBAAkB,CAChB1D,QAAS,CACP3D,IAAK,GACLG,OAAQ,GACRD,KAAM,GACND,MAAO,KAGXqH,YAAaC,2FAIfjI,EAAIkI,WAAW,IAAIN,IAAAA,oBACnB5H,EAAImI,WAAWC,UAEfpI,EAAIqI,GAAG,QAAQ,WACbrI,EAAIsI,UAAU,QAAS,CACrB1G,KAAM,UACNhC,KAAM,CACJgC,KAAM,UACN2G,WAAY,GACZC,SAAU,CACR5G,KAAM,aACN6F,YAAad,EAAQc,gBAI3BzH,EAAIyI,SAAS,CACXC,GAAI,QACJ9G,KAAM,OACN+G,OAAQ,QACRC,OAAQ,CACN,YAAa,QACb,WAAY,SAEdC,MAAO,CACL,aAAc,UACd,aAAc,UAInB,CAACrC,EAAMmB,UAAWhC,IAMrB,OAJAmD,EAAAA,EAAAA,YAAU,WACRpC,MACC,CAACA,KAEG,gBAAKqC,IAAKzC,EAAcN,UAAWxB,EAAIxE","sources":["Shared/utils/range.ts","Charts/ElevationChart.tsx","Charts/PaceChart.tsx","Charts/SplitsChart.tsx","Charts/HeartRateChart.tsx","Activities/DetailedActivity.tsx","Shared/components/Loading.tsx","Shared/components/Mapbox.tsx"],"sourcesContent":["export const range = (from: number, to: number): number[] => {\n  const result = [];\n  for (let i = from; i <= to; i++) {\n    result.push(i);\n  }\n  return result;\n};\n","import {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { DataPoint } from \"../Shared/types\";\nimport { range } from \"../Shared/utils\";\n\ntype ElevationChartProps = {\n  points: DataPoint[];\n  distance: number;\n};\n\nexport const ElevationChart = ({ points, distance }: ElevationChartProps) => {\n  const data = points\n    .filter((point) => {\n      return point.altitude && point.distance;\n    })\n    .map((point) => {\n      const elevation = point.altitude as number;\n      const distance = point.distance as number;\n\n      return {\n        // TODO: Maybe be better to label with time\n        distance: Number(distance / 1000).toFixed(1),\n        elevation: Number(elevation).toFixed(1),\n      };\n    });\n\n  const ticks = range(0, distance / 1000);\n\n  const tooltipLabelFormat = (d: any) => {\n    return `Distance: ${d}km`;\n  };\n\n  const valueFormatter = (d: any) => {\n    return `${d}m`;\n  };\n\n  return (\n    <ResponsiveContainer height={250} width=\"100%\">\n      <AreaChart\n        data={data}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"distance\" ticks={ticks} unit={\"km\"} interval={1} />\n        <YAxis allowDecimals={false} unit={\"m\"} />\n        <Tooltip\n          labelFormatter={tooltipLabelFormat}\n          formatter={valueFormatter}\n        />\n        <Area\n          isAnimationActive={false}\n          type=\"monotone\"\n          dataKey=\"elevation\"\n          stroke=\"#8884d8\"\n          fill=\"#8884d8\"\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n","import {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n} from \"recharts\";\nimport { DataPoint } from \"../Shared/types\";\nimport { formatPace } from \"../Shared/formatters\";\nimport { useCallback } from \"react\";\n\ntype PaceChartProps = {\n  points: DataPoint[];\n};\n\nconst MetersPerSecondToMinutesPerKMConversionFactor = 1000 / 60;\n\nexport const PaceChart = ({ points }: PaceChartProps) => {\n  let data = points\n    .filter((point) => {\n      return point.distance && point.speed;\n    })\n    .map((point) => {\n      return {\n        distance: Number((point.distance as number) / 1000).toFixed(1),\n        Pace:\n          MetersPerSecondToMinutesPerKMConversionFactor / Number(point.speed),\n      };\n    });\n\n  data = filterStanding(data);\n\n  const valFormatter = useCallback((d: any) => {\n    const val = d * 60;\n    return `${formatPace(val)} min / km`;\n  }, []);\n  const labelFormatted = useCallback((d: any) => {\n    return `${d}km`;\n  }, []);\n\n  return (\n    <ResponsiveContainer height={250} width=\"100%\">\n      <LineChart\n        data={data}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"distance\" unit={\"km\"} />\n        <YAxis allowDecimals={false} reversed />\n        <Tooltip formatter={valFormatter} labelFormatter={labelFormatted} />\n        <Line type=\"monotone\" dataKey=\"Pace\" stroke=\"#8884d8\" dot={false} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nfunction filterStanding(data: any[]) {\n  return data.filter((point) => point.Pace <= 20);\n}\n","import { useCallback } from \"react\";\nimport {\n  Bar,\n  BarChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { formatPace } from \"../Shared/formatters\";\nimport { DataPoint } from \"../Shared/types\";\n\ntype SplitsChartProps = {\n  points: DataPoint[];\n};\n\nconst MetersPerSecondToMinutesPerKMConversionFactor = 1000 / 60;\n\nexport const SplitsChart = ({ points }: SplitsChartProps) => {\n  const data = calculateSplits(points);\n\n  function calculateSplits(points: DataPoint[]) {\n    const data: object[] = [];\n\n    if (!points.length || points.length === 0) {\n      return data;\n    }\n\n    let currentSplit = 1; // 1st KM\n    let startTime = points[0].time!;\n\n    const filtered = points.filter((point) => {\n      return point.distance && point.time;\n    });\n\n    filtered.forEach((point, i) => {\n      if (point.distance! < currentSplit * 1000) {\n        return;\n      }\n\n      const seconds =\n        (new Date(point.time!).getTime() - new Date(startTime).getTime()) /\n        1000;\n\n      data.push({\n        name: currentSplit,\n        value:\n          MetersPerSecondToMinutesPerKMConversionFactor /\n          Number(1000 / seconds),\n      });\n      currentSplit++;\n      startTime = point.time!;\n    });\n\n    const lastPoint = points[points.length - 1];\n    const seconds =\n      (new Date(lastPoint.time!).getTime() - new Date(startTime).getTime()) /\n      1000;\n\n    const dist = (lastPoint.distance! as number) - 1000 * (currentSplit - 1);\n\n    // If the last split is less than 100m, ignore it\n    if (dist < 100) {\n      return data;\n    }\n\n    data.push({\n      name: currentSplit,\n      value:\n        MetersPerSecondToMinutesPerKMConversionFactor / Number(dist / seconds),\n    });\n\n    return data;\n  }\n\n  const valFormatter = useCallback((d: any) => {\n    const val = d * 60;\n    return `${formatPace(val)} min / km`;\n  }, []);\n\n  return (\n    <ResponsiveContainer height={300} width=\"100%\">\n      <BarChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" unit=\"km\" />\n        <YAxis />\n        <Tooltip labelFormatter={(d) => `${d}km`} formatter={valFormatter} />\n        <Bar dataKey=\"value\" fill=\"#6fd450\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n","import {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport { range } from \"../Shared/utils\";\nimport { DataPoint } from \"../Shared/types\";\nimport { useCallback } from \"react\";\n\nexport type Props = {\n  streamData: DataPoint[];\n  distance: number;\n};\n\nexport const HeartRateChart = ({ streamData, distance }: Props) => {\n  const data = streamData\n    .filter((point) => {\n      return point?.heartRate && point?.distance;\n    })\n    .map((point) => {\n      return {\n        distance: +Number(point.distance! / 1000).toFixed(2),\n        heartRate: point.heartRate,\n      };\n    });\n\n  const ticks = range(0, Number(distance / 1000));\n\n  const tooltipLabelFormat = useCallback((d: any) => {\n    return `Distance: ${d}km`;\n  }, []);\n\n  const valueFormatter = useCallback((d: any) => {\n    return `${d}bpm`;\n  }, []);\n\n  return (\n    <>\n      {data && (\n        <ResponsiveContainer height={250} width=\"100%\">\n          <AreaChart\n            data={data}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 0,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"distance\" unit={\"km\"} ticks={ticks} />\n            <YAxis allowDecimals={true} />\n            <Tooltip\n              labelFormatter={tooltipLabelFormat}\n              formatter={valueFormatter}\n            />\n            <Area\n              isAnimationActive={false}\n              type=\"monotone\"\n              dataKey=\"heartRate\"\n              stroke=\"#F87666\"\n              fill=\"#F87666\"\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      )}\n    </>\n  );\n};\n","import { format } from \"date-fns\";\n\nimport { Mapbox, Loading } from \"../Shared/components\";\nimport { Activity } from \"../Shared/types\";\nimport {\n  ElevationChart,\n  PaceChart,\n  SplitsChart,\n  HeartRateChart,\n} from \"../Charts\";\nimport { createUseStyles } from \"react-jss\";\nimport { Box, Button, Heading } from \"@primer/react\";\n\nimport { ArrowLeftIcon } from \"@primer/octicons-react\";\n\ntype DetailedActivityProps = {\n  activity?: Activity;\n  handleGoBack(): void;\n};\n\nconst useStyles = createUseStyles({\n  statsHeader: {\n    padding: \"0rem 1rem\",\n  },\n});\n\nconst DetailedActivity = ({\n  activity,\n  handleGoBack,\n}: DetailedActivityProps) => {\n  const css = useStyles();\n\n  return (\n    <Box maxWidth=\"60rem\" margin=\"auto\" height=\"100%\">\n      <Box\n        bg=\"canvas.default\"\n        borderBottomColor=\"border.default\"\n        borderBottomWidth={1}\n        borderBottomStyle=\"solid\"\n        sx={{\n          position: \"sticky\",\n          top: 0,\n          zIndex: 1000,\n          padding: \"1rem\",\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Box\n          sx={{\n            display: \"grid\",\n            gridTemplateColumns: \"1fr auto 1fr\",\n            justifyContent: \"center\",\n            maxWidth: \"55rem\",\n            width: \"100%\",\n          }}\n        >\n          <div>\n            <Button onClick={handleGoBack}>\n              <ArrowLeftIcon />\n              Activities\n            </Button>\n          </div>\n          <Heading\n            as=\"h3\"\n            sx={{\n              margin: \"auto\",\n              marginRight: 0,\n              fontSize: 2,\n            }}\n          >\n            {activity?.type ? activity.type : \"Loading\"}\n          </Heading>\n        </Box>\n      </Box>\n\n      {activity?.polyline && <Mapbox polyline={activity.polyline} />}\n      {activity && activity.streamData ? (\n        <>\n          <Heading\n            sx={{\n              fontSize: 3,\n              marginTop: 4,\n              marginBottom: 1,\n            }}\n          >{`${format(\n            new Date(activity.startTime),\n            \"EEEE, LLLL d, yyyy\"\n          )} at ${format(new Date(activity.startTime), \"HH:mm aaa\")}`}</Heading>\n\n          <Heading\n            sx={{\n              fontSize: 3,\n              marginTop: 4,\n              marginBottom: 2,\n              textAlign: \"center\",\n            }}\n          >\n            Heart Rate\n          </Heading>\n          <HeartRateChart\n            streamData={activity.streamData}\n            distance={activity.distance}\n          />\n\n          <Heading\n            sx={{\n              fontSize: 3,\n              marginTop: 4,\n              marginBottom: 2,\n              textAlign: \"center\",\n            }}\n          >\n            Elevation\n          </Heading>\n          <ElevationChart\n            points={activity.streamData}\n            distance={activity.distance}\n          />\n\n          <Heading\n            sx={{\n              fontSize: 3,\n              marginTop: 4,\n              marginBottom: 2,\n              textAlign: \"center\",\n            }}\n          >\n            Pace\n          </Heading>\n          <PaceChart points={activity.streamData} />\n\n          <Heading\n            sx={{\n              fontSize: 3,\n              marginTop: 4,\n              marginBottom: 2,\n              textAlign: \"center\",\n            }}\n            className={css.statsHeader}\n          >\n            Splits\n          </Heading>\n          <SplitsChart points={activity.streamData} />\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Box>\n  );\n};\n\nexport default DetailedActivity;\n","import { createUseStyles } from \"react-jss\";\n\nimport { Spinner } from \"@primer/react\";\n\nconst useStyles = createUseStyles({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"2rem 0\",\n  },\n});\n\nexport const Loading = () => {\n  const css = useStyles();\n\n  return (\n    <div className={css.container}>\n      <Spinner size=\"large\" />\n    </div>\n  );\n};\n","import { useCallback, useEffect, useRef } from \"react\";\n\nimport { useTheme } from \"@primer/react\";\n\n/**\n * '!mapbox-gl' is a workaround to ES6 compilation errors.\n * @see https://github.com/mapbox/mapbox-gl-js/issues/10565\n */\n// @ts-ignore\n// eslint-disable-next-line\nimport mapboxgl from \"!mapbox-gl\";\nimport * as mapboxPoly from \"@mapbox/polyline\";\nimport { createUseStyles } from \"react-jss\";\n\nconst getBoundingBox = (coords: any[]) => {\n  const bbox = [\n    Number.POSITIVE_INFINITY,\n    Number.POSITIVE_INFINITY,\n    Number.NEGATIVE_INFINITY,\n    Number.NEGATIVE_INFINITY,\n  ];\n\n  return coords.reduce((prev, coord) => {\n    return [\n      Math.min(coord[0], prev[0]),\n      Math.min(coord[1], prev[1]),\n      Math.max(coord[0], prev[2]),\n      Math.max(coord[1], prev[3]),\n    ];\n  }, bbox);\n};\n\nconst useStyles = createUseStyles({\n  map: {\n    height: \"25rem\",\n  },\n});\n\ntype MapboxProps = {\n  polyline: string;\n};\n\nexport const Mapbox = ({ polyline }: MapboxProps) => {\n  const mapContainer = useRef(null);\n  const css = useStyles();\n  const theme = useTheme();\n\n  const setupMap = useCallback(() => {\n    const geojson = mapboxPoly.toGeoJSON(polyline);\n    const bounds = getBoundingBox(geojson.coordinates);\n    const mapStyle =\n      theme.colorMode === \"night\"\n        ? \"mapbox://styles/mapbox/dark-v10\"\n        : \"mapbox://styles/mapbox/outdoors-v11\";\n\n    const map = new mapboxgl.Map({\n      container: mapContainer.current || \"\",\n      style: mapStyle,\n      bounds: new mapboxgl.LngLatBounds(bounds),\n      fitBoundsOptions: {\n        padding: {\n          top: 40,\n          bottom: 40,\n          left: 40,\n          right: 40,\n        },\n      },\n      accessToken: process.env.REACT_APP_MAPBOX_PUBLIC_KEY,\n    });\n\n    // Add map controls\n    map.addControl(new mapboxgl.NavigationControl());\n    map.scrollZoom.disable();\n\n    map.on(\"load\", () => {\n      map.addSource(\"route\", {\n        type: \"geojson\",\n        data: {\n          type: \"Feature\",\n          properties: {},\n          geometry: {\n            type: \"LineString\",\n            coordinates: geojson.coordinates,\n          },\n        },\n      });\n      map.addLayer({\n        id: \"route\",\n        type: \"line\",\n        source: \"route\",\n        layout: {\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\",\n        },\n        paint: {\n          \"line-color\": \"#008DD5\",\n          \"line-width\": 4,\n        },\n      });\n    });\n  }, [theme.colorMode, polyline]);\n\n  useEffect(() => {\n    setupMap();\n  }, [setupMap]);\n\n  return <div ref={mapContainer} className={css.map}></div>;\n};\n"],"names":["range","from","to","result","i","push","ElevationChart","points","distance","data","filter","point","altitude","map","elevation","Number","toFixed","ticks","ResponsiveContainer","height","width","AreaChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","unit","interval","YAxis","allowDecimals","Tooltip","labelFormatter","d","formatter","Area","isAnimationActive","type","stroke","fill","PaceChart","speed","Pace","filterStanding","valFormatter","useCallback","val","formatPace","labelFormatted","LineChart","reversed","Line","dot","MetersPerSecondToMinutesPerKMConversionFactor","SplitsChart","length","currentSplit","startTime","time","forEach","seconds","Date","getTime","name","value","lastPoint","dist","calculateSplits","BarChart","Bar","HeartRateChart","streamData","heartRate","tooltipLabelFormat","valueFormatter","useStyles","createUseStyles","statsHeader","padding","activity","handleGoBack","css","Box","maxWidth","bg","borderBottomColor","borderBottomWidth","borderBottomStyle","sx","position","zIndex","display","justifyContent","gridTemplateColumns","Button","onClick","Heading","as","marginRight","fontSize","polyline","marginTop","marginBottom","format","textAlign","className","container","Loading","Spinner","size","Mapbox","mapContainer","useRef","theme","useTheme","setupMap","geojson","mapboxPoly","bounds","coords","bbox","POSITIVE_INFINITY","NEGATIVE_INFINITY","reduce","prev","coord","Math","min","max","getBoundingBox","coordinates","mapStyle","colorMode","mapboxgl","current","style","fitBoundsOptions","accessToken","process","addControl","scrollZoom","disable","on","addSource","properties","geometry","addLayer","id","source","layout","paint","useEffect","ref"],"sourceRoot":""}