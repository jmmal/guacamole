{"version":3,"sources":["Shared/components/Loading.tsx","Shared/components/Mapbox.tsx","Charts/ElevationChart.tsx","Charts/PaceChart.tsx","Charts/SplitsChart.tsx","Charts/HeartRateChart.tsx","Activities/DetailedActivity.tsx"],"names":["useStyles","createUseStyles","container","width","display","justifyContent","margin","Loading","css","className","size","color","map","height","Mapbox","polyline","mapContainer","useRef","useEffect","setupMap","geojson","mapboxPoly","bounds","coords","bbox","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","reduce","prev","coord","Math","min","max","getBoundingBox","coordinates","mapboxgl","Map","current","style","LngLatBounds","fitBoundsOptions","padding","top","bottom","left","right","accessToken","process","addControl","NavigationControl","scrollZoom","disable","on","addSource","type","data","properties","geometry","addLayer","id","source","layout","paint","ref","ElevationChart","points","distance","filter","point","altitude","elevation","toFixed","ticks","range","ResponsiveContainer","AreaChart","CartesianGrid","strokeDasharray","XAxis","dataKey","unit","interval","YAxis","allowDecimals","Tooltip","labelFormatter","d","formatter","Area","isAnimationActive","stroke","fill","PaceChart","speed","Pace","filterStanding","valFormatter","useCallback","val","formatPace","labelFormatted","LineChart","reversed","Line","dot","MetersPerSecondToMinutesPerKMConversionFactor","SplitsChart","length","currentSplit","startTime","time","forEach","i","seconds","Date","getTime","push","name","value","lastPoint","dist","calculateSplits","BarChart","Bar","HeartRateChart","streamData","heartRate","tooltipLabelFormat","valueFormatter","header","position","borderBottom","zIndex","backgroundColor","headerLayout","gridTemplateColumns","maxWidth","marginAuto","marginRight","statsHeader","DetailedActivity","activity","handleGoBack","Button","onClick","icon","Previous","label","Heading","level","format"],"mappings":"yMAIMA,EAAYC,YAAgB,CAChCC,UAAW,CACTC,MAAO,OACPC,QAAS,OACTC,eAAgB,SAChBC,OAAQ,YAICC,EAAU,WACrB,IAAMC,EAAMR,IAEZ,OACE,qBAAKS,UAAWD,EAAIN,UAApB,SACE,cAAC,aAAD,CAAYQ,KAAK,OAAOJ,OAAO,MAAMK,MAAM,e,2BCY3CX,EAAYC,YAAgB,CAChCW,IAAK,CACHC,OAAQ,WAQCC,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SACjBC,EAAeC,iBAAO,MACtBT,EAAMR,IAEZkB,qBAAU,WACRC,OAGF,IAAMA,EAAW,WACf,IAAMC,EAAUC,YAAqBN,GAC/BO,EAtCa,SAACC,GACtB,IAAMC,EAAO,CACXC,OAAOC,kBACPD,OAAOC,kBACPD,OAAOE,kBACPF,OAAOE,mBAGT,OAAOJ,EAAOK,QAAO,SAACC,EAAMC,GAC1B,MAAO,CACLC,KAAKC,IAAIF,EAAM,GAAID,EAAK,IACxBE,KAAKC,IAAIF,EAAM,GAAID,EAAK,IACxBE,KAAKE,IAAIH,EAAM,GAAID,EAAK,IACxBE,KAAKE,IAAIH,EAAM,GAAID,EAAK,OAEzBL,GAuBcU,CAAed,EAAQe,aAEhCvB,EAAM,IAAIwB,IAASC,IAAI,CAC3BnC,UAAWc,EAAasB,SAAW,GACnCC,MAAO,sCACPjB,OAAQ,IAAIc,IAASI,aAAalB,GAClCmB,iBAAkB,CAChBC,QAAS,CACPC,IAAK,GACLC,OAAQ,GACRC,KAAM,GACNC,MAAO,KAGXC,YAAaC,2FAIfpC,EAAIqC,WAAW,IAAIb,IAASc,mBAC5BtC,EAAIuC,WAAWC,UAEfxC,EAAIyC,GAAG,QAAQ,WACbzC,EAAI0C,UAAU,QAAS,CACrBC,KAAM,UACNC,KAAM,CACJD,KAAM,UACNE,WAAY,GACZC,SAAU,CACRH,KAAM,aACNpB,YAAaf,EAAQe,gBAI3BvB,EAAI+C,SAAS,CACXC,GAAI,QACJL,KAAM,OACNM,OAAQ,QACRC,OAAQ,CACN,YAAa,QACb,WAAY,SAEdC,MAAO,CACL,aAAc,UACd,aAAc,SAMtB,OAAO,qBAAKC,IAAKhD,EAAcP,UAAWD,EAAII,Q,6JCxBjCqD,EAxDQ,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,SAC1BX,EAAOU,EACVE,QAAO,SAACC,GACP,OAAOA,EAAMC,UAAYD,EAAMF,YAEhCvD,KAAI,SAACyD,GACJ,IAAME,EAAYF,EAAMC,SAClBH,EAAWE,EAAMF,SAEvB,MAAO,CAELA,SAAU1C,OAAO0C,EAAW,KAAMK,QAAQ,GAC1CD,UAAW9C,OAAO8C,GAAWC,QAAQ,OAIrCC,EAAQC,YAAM,EAAGP,EAAW,KAUlC,OACE,cAACQ,EAAA,EAAD,CAAqB9D,OAAQ,IAAKV,MAAM,OAAxC,SACE,eAACyE,EAAA,EAAD,CACEpB,KAAMA,EACNlD,OAAQ,CACNqC,IAAK,GACLG,MAAO,GACPD,KAAM,EACND,OAAQ,GANZ,UASE,cAACiC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,WAAWP,MAAOA,EAAOQ,KAAM,KAAMC,SAAU,IAC9D,cAACC,EAAA,EAAD,CAAOC,eAAe,EAAOH,KAAM,MACnC,cAACI,EAAA,EAAD,CACEC,eAvBmB,SAACC,GAC1B,MAAM,aAAN,OAAoBA,EAApB,OAuBMC,UApBe,SAACD,GACtB,MAAM,GAAN,OAAUA,EAAV,QAqBI,cAACE,EAAA,EAAD,CACEC,mBAAmB,EACnBnC,KAAK,WACLyB,QAAQ,YACRW,OAAO,UACPC,KAAK,kB,0BCDAC,MAhDG,SAAC,GAAgC,IAC7CrC,EAD4C,EAA7BU,OAEhBE,QAAO,SAACC,GACP,OAAOA,EAAMF,UAAYE,EAAMyB,SAEhClF,KAAI,SAACyD,GACJ,MAAO,CACLF,SAAU1C,OAAQ4C,EAAMF,SAAsB,KAAMK,QAAQ,GAC5DuB,KAV8C,mBAWItE,OAAO4C,EAAMyB,WAIrEtC,EA+BF,SAAwBA,GACtB,OAAOA,EAAKY,QAAO,SAACC,GAAD,OAAWA,EAAM0B,MAAQ,MAhCrCC,CAAexC,GAEtB,IAAMyC,EAAeC,uBAAY,SAACX,GAChC,IAAMY,EAAU,GAAJZ,EACZ,MAAM,GAAN,OAAUa,YAAWD,GAArB,eACC,IACGE,EAAiBH,uBAAY,SAACX,GAClC,MAAM,GAAN,OAAUA,EAAV,QACC,IAEH,OACE,cAACZ,EAAA,EAAD,CAAqB9D,OAAQ,IAAKV,MAAM,OAAxC,SACE,eAACmG,EAAA,EAAD,CACE9C,KAAMA,EACNlD,OAAQ,CACNqC,IAAK,GACLG,MAAO,GACPD,KAAM,EACND,OAAQ,GANZ,UASE,cAACiC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,WAAWC,KAAM,OAChC,cAACE,EAAA,EAAD,CAAOC,eAAe,EAAOmB,UAAQ,IACrC,cAAClB,EAAA,EAAD,CAASG,UAAWS,EAAcX,eAAgBe,IAClD,cAACG,EAAA,EAAD,CAAMjD,KAAK,WAAWyB,QAAQ,OAAOW,OAAO,UAAUc,KAAK,U,kBCxC7DC,EAAgD,IAAO,GA6E9CC,EA3EK,SAAC,GAAkC,IAC/CnD,EAEN,SAAyBU,GACvB,IAAMV,EAAiB,GAEvB,IAAKU,EAAO0C,QAA4B,IAAlB1C,EAAO0C,OAC3B,OAAOpD,EAGT,IAAIqD,EAAe,EACfC,EAAY5C,EAAO,GAAG6C,KAET7C,EAAOE,QAAO,SAACC,GAC9B,OAAOA,EAAMF,UAAYE,EAAM0C,QAGxBC,SAAQ,SAAC3C,EAAO4C,GACvB,KAAI5C,EAAMF,SAA2B,IAAf0C,GAAtB,CAIA,IAAMK,GACH,IAAIC,KAAK9C,EAAM0C,MAAOK,UAAY,IAAID,KAAKL,GAAWM,WACvD,IAEF5D,EAAK6D,KAAK,CACRC,KAAMT,EACNU,MACEb,EACAjF,OAAO,IAAOyF,KAElBL,IACAC,EAAYzC,EAAM0C,SAGpB,IAAMS,EAAYtD,EAAOA,EAAO0C,OAAS,GACnCM,GACH,IAAIC,KAAKK,EAAUT,MAAOK,UAAY,IAAID,KAAKL,GAAWM,WAC3D,IAEIK,EAAQD,EAAUrD,SAAuB,KAAQ0C,EAAe,GAGtE,GAAIY,EAAO,IACT,OAAOjE,EAST,OANAA,EAAK6D,KAAK,CACRC,KAAMT,EACNU,MACEb,EAAgDjF,OAAOgG,EAAOP,KAG3D1D,EArDIkE,CADuC,EAA/BxD,QAyDrB,IAAM+B,EAAeC,uBAAY,SAACX,GAChC,IAAMY,EAAU,GAAJZ,EACZ,MAAM,GAAN,OAAUa,YAAWD,GAArB,eACC,IAEH,OACE,cAACxB,EAAA,EAAD,CAAqB9D,OAAQ,IAAKV,MAAM,OAAxC,SACE,eAACwH,EAAA,EAAD,CAAUnE,KAAMA,EAAhB,UACE,cAACqB,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOC,KAAK,OAC3B,cAACE,EAAA,EAAD,IACA,cAACE,EAAA,EAAD,CAASC,eAAgB,SAACC,GAAD,gBAAUA,EAAV,OAAiBC,UAAWS,IACrD,cAAC2B,EAAA,EAAD,CAAK5C,QAAQ,QAAQY,KAAK,kBCnErBiC,EAAiB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,WAAY3D,EAAsB,EAAtBA,SACrCX,EAAOsE,EACV1D,QAAO,SAACC,GACP,OAAY,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAO0D,aAAP,OAAoB1D,QAApB,IAAoBA,OAApB,EAAoBA,EAAOF,aAEnCvD,KAAI,SAACyD,GACJ,MAAO,CACLF,UAAW1C,OAAO4C,EAAMF,SAAY,KAAMK,QAAQ,GAClDuD,UAAW1D,EAAM0D,cAIjBtD,EAAQC,YAAM,EAAGjD,OAAO0C,EAAW,MAEnC6D,EAAqB9B,uBAAY,SAACX,GACtC,MAAM,aAAN,OAAoBA,EAApB,QACC,IAEG0C,EAAiB/B,uBAAY,SAACX,GAClC,MAAM,GAAN,OAAUA,EAAV,SACC,IAEH,OACE,mCACG/B,GACC,cAACmB,EAAA,EAAD,CAAqB9D,OAAQ,IAAKV,MAAM,OAAxC,SACE,eAACyE,EAAA,EAAD,CACEpB,KAAMA,EACNlD,OAAQ,CACNqC,IAAK,GACLG,MAAO,GACPD,KAAM,EACND,OAAQ,GANZ,UASE,cAACiC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,WAAWC,KAAM,KAAMR,MAAOA,IAC7C,cAACU,EAAA,EAAD,CAAOC,eAAe,IACtB,cAACC,EAAA,EAAD,CACEC,eAAgB0C,EAChBxC,UAAWyC,IAEb,cAACxC,EAAA,EAAD,CACEC,mBAAmB,EACnBnC,KAAK,WACLyB,QAAQ,YACRW,OAAO,UACPC,KAAK,oB,0BCjDb5F,EAAYC,YAAgB,CAChCiI,OAAQ,CACNC,SAAU,SACVxF,IAAK,EACLyF,aAAc,oBACdC,OAAQ,IACRC,gBAAiB,QACjB5F,QAAS,OACTtC,QAAS,OACTC,eAAgB,UAElBkI,aAAc,CACZnI,QAAS,OACToI,oBAAqB,eACrBnI,eAAgB,SAChBoI,SAAU,QACVtI,MAAO,QAETuI,WAAY,CACVpI,OAAQ,OACRqI,YAAa,GAEfC,YAAa,CACXlG,QAAS,eAqEEmG,UAjEU,SAAC,GAGI,IAF5BC,EAE2B,EAF3BA,SACAC,EAC2B,EAD3BA,aAEMvI,EAAMR,IAEZ,OACE,sBAAKS,UAAU,qBAAf,UACE,qBAAKA,UAAWD,EAAI0H,OAApB,SACE,sBAAKzH,UAAWD,EAAI+H,aAApB,UACE,8BACE,cAACS,EAAA,EAAD,CACEC,QAASF,EACTG,KAAM,cAACC,EAAA,EAAD,IACNC,MAAM,aACN1I,KAAK,YAGT,cAAC2I,EAAA,EAAD,CAASC,MAAM,IAAI7I,UAAWD,EAAIkI,WAAlC,UACW,OAARI,QAAQ,IAARA,OAAA,EAAAA,EAAUvF,MAAOuF,EAASvF,KAAO,kBAK/B,OAARuF,QAAQ,IAARA,OAAA,EAAAA,EAAU/H,WAAY,cAAC,IAAD,CAAQA,SAAU+H,EAAS/H,WACjD+H,GAAYA,EAAShB,WACpB,qCACE,cAACuB,EAAA,EAAD,CAASC,MAAM,IAAI7I,UAAWD,EAAIoI,YAAlC,mBAAmDW,YACjD,IAAIpC,KAAK2B,EAAShC,WAClB,sBAFF,eAGQyC,YAAO,IAAIpC,KAAK2B,EAAShC,WAAY,gBAE7C,cAACuC,EAAA,EAAD,CAASC,MAAM,IAAI7I,UAAWD,EAAIoI,YAAlC,wBAGA,cAAC,EAAD,CACEd,WAAYgB,EAAShB,WACrB3D,SAAU2E,EAAS3E,WAGrB,cAACkF,EAAA,EAAD,CAASC,MAAM,IAAI7I,UAAWD,EAAIoI,YAAlC,uBAGA,cAAC,EAAD,CACE1E,OAAQ4E,EAAShB,WACjB3D,SAAU2E,EAAS3E,WAGrB,cAACkF,EAAA,EAAD,CAASC,MAAM,IAAI7I,UAAWD,EAAIoI,YAAlC,kBAGA,cAAC,EAAD,CAAW1E,OAAQ4E,EAAShB,aAE5B,cAACuB,EAAA,EAAD,CAASC,MAAM,IAAI7I,UAAWD,EAAIoI,YAAlC,oBAGA,cAAC,EAAD,CAAa1E,OAAQ4E,EAAShB,gBAGhC,cAAC,IAAD","file":"static/js/6.89f442c1.chunk.js","sourcesContent":["import React from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport { BeatLoader } from \"react-spinners\";\n\nconst useStyles = createUseStyles({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"2rem 0\",\n  },\n});\n\nexport const Loading = () => {\n  const css = useStyles();\n\n  return (\n    <div className={css.container}>\n      <BeatLoader size=\"30px\" margin=\"4px\" color=\"#7D4CDB\" />\n    </div>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\n/**\n * '!mapbox-gl' is a workaround to ES6 compilation errors.\n * @see https://github.com/mapbox/mapbox-gl-js/issues/10565\n */\n// @ts-ignore\n// eslint-disable-next-line\nimport mapboxgl from \"!mapbox-gl\";\nimport * as mapboxPoly from \"@mapbox/polyline\";\nimport { createUseStyles } from \"react-jss\";\n\nconst getBoundingBox = (coords: any[]) => {\n  const bbox = [\n    Number.POSITIVE_INFINITY,\n    Number.POSITIVE_INFINITY,\n    Number.NEGATIVE_INFINITY,\n    Number.NEGATIVE_INFINITY,\n  ];\n\n  return coords.reduce((prev, coord) => {\n    return [\n      Math.min(coord[0], prev[0]),\n      Math.min(coord[1], prev[1]),\n      Math.max(coord[0], prev[2]),\n      Math.max(coord[1], prev[3]),\n    ];\n  }, bbox);\n};\n\nconst useStyles = createUseStyles({\n  map: {\n    height: \"25rem\",\n  },\n});\n\ntype MapboxProps = {\n  polyline: string;\n};\n\nexport const Mapbox = ({ polyline }: MapboxProps) => {\n  const mapContainer = useRef(null);\n  const css = useStyles();\n\n  useEffect(() => {\n    setupMap();\n  });\n\n  const setupMap = (): void => {\n    const geojson = mapboxPoly.toGeoJSON(polyline);\n    const bounds = getBoundingBox(geojson.coordinates);\n\n    const map = new mapboxgl.Map({\n      container: mapContainer.current || \"\",\n      style: \"mapbox://styles/mapbox/outdoors-v11\",\n      bounds: new mapboxgl.LngLatBounds(bounds),\n      fitBoundsOptions: {\n        padding: {\n          top: 40,\n          bottom: 40,\n          left: 40,\n          right: 40,\n        },\n      },\n      accessToken: process.env.REACT_APP_MAPBOX_PUBLIC_KEY,\n    });\n\n    // Add map controls\n    map.addControl(new mapboxgl.NavigationControl());\n    map.scrollZoom.disable();\n\n    map.on(\"load\", () => {\n      map.addSource(\"route\", {\n        type: \"geojson\",\n        data: {\n          type: \"Feature\",\n          properties: {},\n          geometry: {\n            type: \"LineString\",\n            coordinates: geojson.coordinates,\n          },\n        },\n      });\n      map.addLayer({\n        id: \"route\",\n        type: \"line\",\n        source: \"route\",\n        layout: {\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\",\n        },\n        paint: {\n          \"line-color\": \"#008DD5\",\n          \"line-width\": 4,\n        },\n      });\n    });\n  };\n\n  return <div ref={mapContainer} className={css.map}></div>;\n};\n","import React from \"react\";\n\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { DataPoint } from \"../Shared/types\";\nimport { range } from \"../Shared/utils\";\n\ntype ElevationChartProps = {\n  points: DataPoint[];\n  distance: number;\n};\n\nconst ElevationChart = ({ points, distance }: ElevationChartProps) => {\n  const data = points\n    .filter((point) => {\n      return point.altitude && point.distance;\n    })\n    .map((point) => {\n      const elevation = point.altitude as number;\n      const distance = point.distance as number;\n\n      return {\n        // TODO: Maybe be better to label with time\n        distance: Number(distance / 1000).toFixed(1),\n        elevation: Number(elevation).toFixed(1),\n      };\n    });\n\n  const ticks = range(0, distance / 1000);\n\n  const tooltipLabelFormat = (d: any) => {\n    return `Distance: ${d}km`;\n  };\n\n  const valueFormatter = (d: any) => {\n    return `${d}m`;\n  };\n\n  return (\n    <ResponsiveContainer height={250} width=\"100%\">\n      <AreaChart\n        data={data}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"distance\" ticks={ticks} unit={\"km\"} interval={1} />\n        <YAxis allowDecimals={false} unit={\"m\"} />\n        <Tooltip\n          labelFormatter={tooltipLabelFormat}\n          formatter={valueFormatter}\n        />\n        <Area\n          isAnimationActive={false}\n          type=\"monotone\"\n          dataKey=\"elevation\"\n          stroke=\"#8884d8\"\n          fill=\"#8884d8\"\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default ElevationChart;\n","import {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n} from \"recharts\";\nimport { DataPoint } from \"../Shared/types\";\nimport { formatPace } from \"../Shared/formatters\";\nimport { useCallback } from \"react\";\n\ntype PaceChartProps = {\n  points: DataPoint[];\n};\n\nconst MetersPerSecondToMinutesPerKMConversionFactor = 1000 / 60;\n\nconst PaceChart = ({ points }: PaceChartProps) => {\n  let data = points\n    .filter((point) => {\n      return point.distance && point.speed;\n    })\n    .map((point) => {\n      return {\n        distance: Number((point.distance as number) / 1000).toFixed(1),\n        Pace:\n          MetersPerSecondToMinutesPerKMConversionFactor / Number(point.speed),\n      };\n    });\n\n  data = filterStanding(data);\n\n  const valFormatter = useCallback((d: any) => {\n    const val = d * 60;\n    return `${formatPace(val)} min / km`;\n  }, []);\n  const labelFormatted = useCallback((d: any) => {\n    return `${d}km`;\n  }, []);\n\n  return (\n    <ResponsiveContainer height={250} width=\"100%\">\n      <LineChart\n        data={data}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"distance\" unit={\"km\"} />\n        <YAxis allowDecimals={false} reversed />\n        <Tooltip formatter={valFormatter} labelFormatter={labelFormatted} />\n        <Line type=\"monotone\" dataKey=\"Pace\" stroke=\"#8884d8\" dot={false} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nfunction filterStanding(data: any[]) {\n  return data.filter((point) => point.Pace <= 20);\n}\n\nexport default PaceChart;\n","import { useCallback } from \"react\";\nimport {\n  Bar,\n  BarChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { formatPace } from \"../Shared/formatters\";\nimport { DataPoint } from \"../Shared/types\";\n\ntype SplitsChartProps = {\n  points: DataPoint[];\n};\n\nconst MetersPerSecondToMinutesPerKMConversionFactor = 1000 / 60;\n\nconst SplitsChart = ({ points }: SplitsChartProps) => {\n  const data = calculateSplits(points);\n\n  function calculateSplits(points: DataPoint[]) {\n    const data: object[] = [];\n\n    if (!points.length || points.length === 0) {\n      return data;\n    }\n\n    let currentSplit = 1; // 1st KM\n    let startTime = points[0].time!;\n\n    const filtered = points.filter((point) => {\n      return point.distance && point.time;\n    });\n\n    filtered.forEach((point, i) => {\n      if (point.distance! < currentSplit * 1000) {\n        return;\n      }\n\n      const seconds =\n        (new Date(point.time!).getTime() - new Date(startTime).getTime()) /\n        1000;\n\n      data.push({\n        name: currentSplit,\n        value:\n          MetersPerSecondToMinutesPerKMConversionFactor /\n          Number(1000 / seconds),\n      });\n      currentSplit++;\n      startTime = point.time!;\n    });\n\n    const lastPoint = points[points.length - 1];\n    const seconds =\n      (new Date(lastPoint.time!).getTime() - new Date(startTime).getTime()) /\n      1000;\n\n    const dist = (lastPoint.distance! as number) - 1000 * (currentSplit - 1);\n\n    // If the last split is less than 100m, ignore it\n    if (dist < 100) {\n      return data;\n    }\n\n    data.push({\n      name: currentSplit,\n      value:\n        MetersPerSecondToMinutesPerKMConversionFactor / Number(dist / seconds),\n    });\n\n    return data;\n  }\n\n  const valFormatter = useCallback((d: any) => {\n    const val = d * 60;\n    return `${formatPace(val)} min / km`;\n  }, []);\n\n  return (\n    <ResponsiveContainer height={500} width=\"100%\">\n      <BarChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" unit=\"km\" />\n        <YAxis />\n        <Tooltip labelFormatter={(d) => `${d}km`} formatter={valFormatter} />\n        <Bar dataKey=\"value\" fill=\"#6fd450\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default SplitsChart;\n","import React from \"react\";\n\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport { range } from \"../Shared/utils\";\nimport { DataPoint } from \"../Shared/types\";\nimport { useCallback } from \"react\";\n\nexport type Props = {\n  streamData: DataPoint[];\n  distance: number;\n};\n\nexport const HeartRateChart = ({ streamData, distance }: Props) => {\n  const data = streamData\n    .filter((point) => {\n      return point?.heartRate && point?.distance;\n    })\n    .map((point) => {\n      return {\n        distance: +Number(point.distance! / 1000).toFixed(2),\n        heartRate: point.heartRate,\n      };\n    });\n\n  const ticks = range(0, Number(distance / 1000));\n\n  const tooltipLabelFormat = useCallback((d: any) => {\n    return `Distance: ${d}km`;\n  }, []);\n\n  const valueFormatter = useCallback((d: any) => {\n    return `${d}bpm`;\n  }, []);\n\n  return (\n    <>\n      {data && (\n        <ResponsiveContainer height={250} width=\"100%\">\n          <AreaChart\n            data={data}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 0,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"distance\" unit={\"km\"} ticks={ticks} />\n            <YAxis allowDecimals={true} />\n            <Tooltip\n              labelFormatter={tooltipLabelFormat}\n              formatter={valueFormatter}\n            />\n            <Area\n              isAnimationActive={false}\n              type=\"monotone\"\n              dataKey=\"heartRate\"\n              stroke=\"#F87666\"\n              fill=\"#F87666\"\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      )}\n    </>\n  );\n};\n","import { Previous } from \"grommet-icons\";\nimport { format } from \"date-fns\";\n\nimport { Mapbox, Loading } from \"../Shared/components\";\nimport { Activity } from \"../Shared/types\";\nimport {\n  ElevationChart,\n  PaceChart,\n  SplitsChart,\n  HeartRateChart,\n} from \"../Charts\";\nimport { createUseStyles } from \"react-jss\";\nimport { Button, Heading } from \"grommet\";\n\ntype DetailedActivityProps = {\n  activity?: Activity;\n  handleGoBack(): void;\n};\n\nconst useStyles = createUseStyles({\n  header: {\n    position: \"sticky\",\n    top: 0,\n    borderBottom: \"1px solid #e0e0e0\",\n    zIndex: 1000,\n    backgroundColor: \"white\",\n    padding: \"1rem\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  headerLayout: {\n    display: \"grid\",\n    gridTemplateColumns: \"1fr auto 1fr\",\n    justifyContent: \"center\",\n    maxWidth: \"55rem\",\n    width: \"100%\",\n  },\n  marginAuto: {\n    margin: \"auto\",\n    marginRight: 0,\n  },\n  statsHeader: {\n    padding: \"0rem 1rem\",\n  },\n});\n\nconst DetailedActivity = ({\n  activity,\n  handleGoBack,\n}: DetailedActivityProps) => {\n  const css = useStyles();\n\n  return (\n    <div className=\"activity-component\">\n      <div className={css.header}>\n        <div className={css.headerLayout}>\n          <div>\n            <Button\n              onClick={handleGoBack}\n              icon={<Previous />}\n              label=\"Activities\"\n              size=\"small\"\n            />\n          </div>\n          <Heading level=\"3\" className={css.marginAuto}>\n            {activity?.type ? activity.type : \"Loading\"}\n          </Heading>\n        </div>\n      </div>\n\n      {activity?.polyline && <Mapbox polyline={activity.polyline} />}\n      {activity && activity.streamData ? (\n        <>\n          <Heading level=\"2\" className={css.statsHeader}>{`${format(\n            new Date(activity.startTime),\n            \"EEEE, LLLL d, yyyy\"\n          )} at ${format(new Date(activity.startTime), \"HH:mm aaa\")}`}</Heading>\n\n          <Heading level=\"3\" className={css.statsHeader}>\n            Heart Rate\n          </Heading>\n          <HeartRateChart\n            streamData={activity.streamData}\n            distance={activity.distance}\n          />\n\n          <Heading level=\"3\" className={css.statsHeader}>\n            Elevation\n          </Heading>\n          <ElevationChart\n            points={activity.streamData}\n            distance={activity.distance}\n          />\n\n          <Heading level=\"3\" className={css.statsHeader}>\n            Pace\n          </Heading>\n          <PaceChart points={activity.streamData} />\n\n          <Heading level=\"3\" className={css.statsHeader}>\n            Splits\n          </Heading>\n          <SplitsChart points={activity.streamData} />\n        </>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default DetailedActivity;\n"],"sourceRoot":""}