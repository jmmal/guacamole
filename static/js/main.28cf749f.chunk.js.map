{"version":3,"sources":["Shared/Helpers.ts","Shared/Loading.tsx","Shared/Mapbox.tsx","Activities/ActivityPreview.tsx","Activities/ActivityService.ts","Activities/ActivityList.tsx","Charts/ElevationChart.tsx","Charts/PaceChart.tsx","Charts/SplitsChart.tsx","Activities/DetailedActivity.tsx","Activities/Upload.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Helpers","value","totalMinutes","Math","floor","totalHours","seconds","minutes","padStart","Loading","className","role","Mapbox","bounds","polyline","mapContainer","useRef","useEffect","setupMap","map","mapboxgl","container","current","style","minLng","minLat","maxLng","maxLat","fitBoundsOptions","padding","top","bottom","left","right","accessToken","addControl","coords","mapboxPoly","on","addSource","type","data","properties","geometry","coordinates","addLayer","id","source","layout","paint","ref","ActivityPreview","activity","history","useHistory","openActivity","push","tabIndex","onClick","onKeyDown","event","key","format","Date","startTime","title","src","image","alt","Number","distance","toFixed","pace","maxElevation","minElevation","elapsedTime","FooterColumn","ActivityService","baseUrl","getAllActivities","pageNumber","pageSize","filter","filerVal","axios","get","this","params","getActivity","upload","file","formData","FormData","append","name","post","getFilters","url","getPoints","ActivityList","useState","activities","setActivities","totalCount","setTotalCount","page","setPage","filters","setFilters","setFilter","updateActivities","count","getActivities","a","response","results","then","resp","aria-label","onChange","$event","currentTarget","Name","Total","dataLength","length","next","hasMore","loader","ElevationChart","points","point","distanceFromStart","elevation","height","width","margin","strokeDasharray","dataKey","allowDecimals","tickCount","unit","minTickGap","isAnimationActive","stroke","fill","PaceChart","SplitsChart","currentSplit","time","forEach","i","getTime","lastPoint","dist","calculateSplits","DetailedActivityContainer","activityId","useParams","setActivity","setPoints","loadActivities","loadPoints","handleGoBack","goBack","DetailedActivity","Upload","loading","setLoading","setFile","uploadedFile","target","files","item","htmlFor","disabled","Activities","path","useRouteMatch","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.28cf749f.chunk.js","sourcesContent":["export const Helpers = {\n  /**\n   * Converts value (representing a duration in seconds) into a string formatted \n   * as hh mm ss\n   * e.g. 1h 28m or 28m 10s\n   */\n  duration: (value: number): string => {\n    const totalMinutes = Math.floor(value / 60);\n    const totalHours = Math.floor(totalMinutes / 60);\n    const seconds = value - totalMinutes * 60;\n\n    if (totalHours >= 1) {\n      return `${totalHours}h ${totalMinutes % 60}m`;\n    }\n\n    return `${totalMinutes}m ${seconds}s`;\n  },\n\n  /**\n   * Converts a number value (representing a speed in m/s) into a string representation\n   * of the value in Minutes / Kilometer\n   */\n  pace: (value: number): string => {\n    const minutes = Math.floor(value / 60);\n    const seconds = `${Math.floor(value - (minutes * 60))}`;\n\n    return `${minutes}:${seconds.padStart(2, '0')}`;\n  }\n}","import React from 'react';\nimport '../styles/styles.scss'\n\nexport const Loading = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"spinner-grow text-warning\" role=\"status\"></div>\n      <div className=\"spinner-grow text-success\" role=\"status\"></div>\n      <div className=\"spinner-grow text-info\" role=\"status\"></div>\n    </div>\n  )\n}","import React, { useEffect, useRef } from 'react';\n\nimport * as mapboxgl from 'mapbox-gl';\nimport * as mapboxPoly from '@mapbox/polyline';\n\nimport { Bounds } from '../Activities/models';\n\ntype MapboxProps = {\n  bounds: Bounds;\n  polyline: string;\n}\n\nexport const Mapbox = ({ bounds, polyline }: MapboxProps) => {\n  const mapContainer = useRef(null);\n\n  useEffect(() => {\n    setupMap();\n  });\n\n  const setupMap = (): void => {\n    const map = new mapboxgl.Map({\n      container: mapContainer.current || '',\n      style: 'mapbox://styles/mapbox/outdoors-v11',\n      bounds: new mapboxgl.LngLatBounds(\n        new mapboxgl.LngLat(\n          bounds.minLng,\n          bounds.minLat\n        ),\n        new mapboxgl.LngLat(\n          bounds.maxLng,\n          bounds.maxLat\n        )\n      ),\n      fitBoundsOptions: {\n        padding: {\n          top: 40,\n          bottom: 40,\n          left: 40,\n          right: 40,\n        },\n      },\n      accessToken: 'pk.eyJ1Ijoiam1tYWwiLCJhIjoiY2tmZjdreWM4MDFmNjJzbXpjb2ZlMWtyaCJ9.znjz821vZEx-Jh0Q0qEteg',\n    });\n\n    // Add map controls\n    map.addControl(new mapboxgl.NavigationControl());\n\n    const coords = mapboxPoly.toGeoJSON(polyline);\n\n    map.on('load', () => {\n      map.addSource('route', {\n        type: 'geojson',\n        data: {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'LineString',\n            coordinates: coords.coordinates,\n          },\n        },\n      });\n      map.addLayer({\n        id: 'route',\n        type: 'line',\n        source: 'route',\n        layout: {\n          'line-join': 'round',\n          'line-cap': 'round',\n        },\n        paint: {\n          'line-color': '#008DD5',\n          'line-width': 4,\n        },\n      });\n    });\n  }\n\n  return (\n    <div ref={mapContainer} className=\"map match-parent\"></div>\n  )\n}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { format } from 'date-fns';\n\nimport { Activity } from './models';\nimport { Helpers } from '../Shared';\nimport '../styles/styles.scss'\n\ntype ActivityPreviewProps = {\n  activity: Activity;\n}\n\nexport const ActivityPreview = ({ activity }: ActivityPreviewProps) => {\n  const history = useHistory();\n\n  function openActivity() {\n    history.push(`/activities/${activity.id}`);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent) {\n    if (event.key === \"ENTER\") {\n      openActivity()\n    }\n  }\n\n  return (\n    <div className=\"activity__preview focusable\" tabIndex={0} onClick={openActivity} onKeyDown={handleKeyDown}>\n      <div className=\"header\">\n        <h3 className=\"date mb-0\">{ format(new Date(activity.startTime), \"EEEE, LLLL d, yyyy\") }</h3>\n        <p className=\"title mb-0\">{ activity.title }</p>\n      </div>\n      \n      <img\n        src={'data:image/png;base64,' + activity.image}\n        alt=\"Activity GPS preview\"\n        className=\"map-image\"\n      />\n\n      <div className=\"stats-footer\">\n        <FooterColumn title='Distance' value={ `${Number(activity.distance / 1000).toFixed(2)} km`} />\n        <FooterColumn title='Pace' value={ `${Helpers.pace(activity.pace) } min / km`} />\n        <FooterColumn title='Elevation' value={`${Number(activity.maxElevation - activity.minElevation).toFixed(1)} m`} />\n        <FooterColumn title='Elapsed Time' value={ Helpers.duration(activity.elapsedTime)} />\n      </div>\n    </div>\n  )\n}\n\ntype FooterColumnProps = {\n  title: string;\n  value: string;\n}\n\nconst FooterColumn = ({title, value}: FooterColumnProps) => {\n  return (\n    <div className=\"col\">\n      <p className=\"title\">{ title }</p>\n      <p className=\"value mb-0\">{ value }</p>\n    </div>\n  )\n}","import axios from 'axios';\nimport { GetAllResponse, PointResponse, ActivityTypeAggregation, Activity } from './models';\n\n\nexport const ActivityService = {\n  baseUrl: 'guacamole-282910.ts.r.appspot.com',\n\n  getAllActivities(pageNumber: number, pageSize: number, filter: string | null = null) {\n    const filerVal = filter === 'All' ? null : filter;\n    return axios.get<GetAllResponse>(this.baseUrl + '/activities', {\n      params: {\n        pageNumber: pageNumber,\n        pageSize: pageSize,\n        type: filerVal\n      }\n    })\n  },\n\n  getActivity(id: string) {\n    return axios.get<Activity>(this.baseUrl + '/activities/' + id)\n  },\n\n  upload(file: File) {\n    const formData = new FormData();\n    formData.append('file', file, file.name);\n    return axios.post(this.baseUrl + '/upload', formData);\n  },\n\n  getFilters() {\n    const url = this.baseUrl + '/filters';\n\n    return axios.get<ActivityTypeAggregation[]>(url);\n  },\n\n  getPoints(id: string) {\n    const url = this.baseUrl + '/activities/' + id + '/points';\n\n    return axios.get<PointResponse>(url);\n  }\n}","import React, { FormEvent, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { ReactComponent as CloudIcon } from 'bootstrap-icons/icons/cloud-upload.svg';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nimport { ActivityPreview } from './ActivityPreview';\nimport { ActivityService } from './ActivityService';\n\nimport { Activity, ActivityTypeAggregation } from './models';\nimport { Loading } from '../Shared';\n\nexport const ActivityList = () => {\n  const history = useHistory()\n  const [activities, setActivities] = useState<Array<Activity>>([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState<ActivityTypeAggregation[]>([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    getActivities(page, filter).then(resp => {\n      updateActivities(resp.data.results, resp.data.totalCount)\n    })\n    // eslint-disable-next-line\n  }, [filter]);\n\n  useEffect(() => {\n    ActivityService.getFilters().then(resp => {\n      setFilters(resp.data);\n    })\n  }, []);\n\n  function updateActivities(activities: Activity[], count: number) {\n    setTotalCount(count);\n    setActivities(activities);\n  }\n\n  function getActivities(pageNumber: number = 1, filter: string | null) {\n    return ActivityService.getAllActivities(pageNumber, 3, filter);\n  }\n\n  async function loadNext() {\n    const response = await getActivities(page + 1, filter);\n\n    setPage(page + 1);\n    updateActivities([\n      ...activities,\n      ...response.data.results\n    ], response.data.totalCount);\n  }\n\n  function onUploadClick() {\n    history.push('/activities/upload')\n  }\n\n  function handleFilterChange($event: FormEvent<HTMLSelectElement>) {\n    setPage(1);\n    setFilter($event.currentTarget.value);\n  }\n\n  return (\n    <div className=\"activity__list-wrapper\">\n      <div className=\"activity__list\">\n        <div className=\"options\">\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-secondary upload-btn\"\n            onClick={onUploadClick}\n          >Upload <CloudIcon />\n          </button>\n          <select\n            className=\"form-select type-filters\"\n            aria-label=\"Default select example\"\n            onChange={handleFilterChange}\n          >\n            <option value='All'>Filter by: All</option>\n            { filters && filters.map(filter => (\n              <option key={filter.Name} value={filter.Name}>{ filter.Name } ({filter.Total})</option>\n            ))}\n          </select>\n        </div>\n        <InfiniteScroll\n          dataLength={activities.length}\n          next={loadNext}\n          hasMore={activities.length < totalCount}\n          loader={<Loading />}\n        >\n          { activities.map(activity => (\n            <ActivityPreview \n              key={activity.id}\n              activity={activity}\n            />\n          ))}\n        </InfiniteScroll>\n        { activities.length === 0 && (\n          <Loading />\n        )}\n      </div>\n    </div>\n  )\n}","import React from 'react';\n\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Point } from '../Activities/models';\n\ntype ElevationChartProps = {\n  points: Point[]\n}\n\nexport const ElevationChart = ({ points }: ElevationChartProps) => {\n  const data = points.map(point => {\n    return {\n      // TODO: Maybe be better to label with time\n      distance: Number(point.distanceFromStart / 1000).toFixed(1),\n      elevation: Number(point.elevation).toFixed(1)\n    };\n  });\n\n  return (\n    <ResponsiveContainer height={250} width='100%'>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 10, right: 30, left: 0, bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"distance\" allowDecimals={false} tickCount={4} unit={'km'} minTickGap={20} />\n        <YAxis allowDecimals={false} unit={'m'} />\n        <Tooltip />\n        <Area isAnimationActive={false} type=\"monotone\" dataKey=\"elevation\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}","import React from 'react';\n\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Point } from '../Activities/models';\n\ntype PaceChartProps = {\n  points: Point[]\n}\n\nexport const PaceChart = ({ points }: PaceChartProps) => {\n  const data = points.map(point => {\n    return {\n      distance: Number(point.distanceFromStart / 1000).toFixed(1),\n      pace: Number(point.pace).toFixed(2)\n    };\n  })\n  return (\n    <ResponsiveContainer height={250} width='100%'>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 10, right: 30, left: 0, bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"distance\" allowDecimals={false} tickCount={4} unit={'km'} minTickGap={20} />\n        <YAxis allowDecimals={false} unit={'m/s'} />\n        <Tooltip />\n        <Area isAnimationActive={false} type=\"monotone\" dataKey=\"pace\" stroke=\"#5293fa\" fill=\"#5293fa\" />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}","import React from 'react';\n\nimport {\n  Bar,\n  BarChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Point } from '../Activities/models';\n\ntype SplitsChartProps = {\n  points: Point[]\n}\n\nexport const SplitsChart = ({ points }: SplitsChartProps) => {\n  const data = calculateSplits(points);\n\n  function calculateSplits(points: Point[]) {\n    const data: object[] = [];\n\n    if (!points.length || points.length === 0) { return data; }\n\n    let currentSplit = 1; // 1st KM\n    let startTime = points[0].time;\n\n    points.forEach((point, i) => {\n      if (point.distanceFromStart < (currentSplit * 1000)) {\n        return;\n      }\n\n      const seconds = (new Date(point.time).getTime() - new Date(startTime).getTime()) / 1000;\n\n      data.push({\n        name: currentSplit,\n        value: Number(1000 / seconds).toFixed(4)\n      });\n      currentSplit++;\n      startTime = point.time;\n    });\n\n    const lastPoint = points[points.length - 1];\n    const seconds = (new Date(lastPoint.time).getTime() - new Date(startTime).getTime()) / 1000;\n\n    const dist = lastPoint.distanceFromStart - (1000 * (currentSplit - 1));\n\n    // If the last split is less than 100m, ignore it\n    if (dist < 100) {\n      return data;\n    }\n\n    data.push({\n      name: currentSplit,\n      value: Number(seconds / dist).toFixed(2)\n    });\n\n    return data;\n  }\n\n  return (\n    <ResponsiveContainer height={250} width='100%'>\n      <BarChart data={data} >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"value\" fill=\"#6fd450\" />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport {\n  ReactComponent as ChevronLeft\n} from 'bootstrap-icons/icons/chevron-left.svg';\nimport { format } from 'date-fns';\n\nimport { Mapbox } from '../Shared';\nimport { ActivityService } from './ActivityService';\nimport { Activity, Point } from './models';\nimport { Loading } from '../Shared';\nimport { ElevationChart, PaceChart, SplitsChart } from '../Charts';\n\ninterface DetailedActivityParams {\n  activityId: string;\n}\n\nconst DetailedActivityContainer = () => {\n  const history = useHistory();\n  const { activityId } = useParams<DetailedActivityParams>();\n\n  const [ activity, setActivity ] = useState<Activity>();\n  const [ points, setPoints ] = useState<Point[]>([]);\n\n  useEffect(() => {\n    loadActivities(activityId);\n  }, [ activityId ]);\n\n  useEffect(() => {\n    loadPoints(activityId);\n  }, [activityId]);\n  \n  async function loadActivities(id: string) {\n    const response = await ActivityService.getActivity(id);\n    setActivity(response.data);\n  }\n\n  async function loadPoints(id: string) {\n    const response = await ActivityService.getPoints(id);\n    setPoints(response.data.points);\n  }\n\n  function goBack() {\n    history.goBack();\n  }\n\n  return (\n    <DetailedActivity\n      points={points}\n      activity={activity}\n      handleGoBack={goBack}\n    />\n  )\n}\n\ntype DetailedActivityProps = {\n  points?: Point[];\n  activity?: Activity;\n  handleGoBack(): void;\n}\n\nconst DetailedActivity = ({ points, activity, handleGoBack }: DetailedActivityProps) => { \n  return (\n    <div className=\"activity-component\">\n      <div className=\"header-detail\">\n        <button type=\"button\" className=\"btn btn-outline-dark btn-sm\" onClick={handleGoBack}><ChevronLeft /> Activities</button>\n        <h4 className=\"activity-type mb-0\">{ activity?.type ? activity.type : 'Loading' }</h4>\n      </div>\n       \n      { (activity && points) ? (\n        <div className=\"detail-activity\">\n          <p className=\"lead\">{ `${format(new Date(activity.startTime), 'HH:mm')} on ${format(new Date(activity.startTime), 'EEEE, LLLL d, yyyy')}`}</p>\n          <Mapbox bounds={ activity.bounds } polyline={ activity.polyline } />\n\n          <h3 className=\"el-text mt-3\">Elevation</h3>\n          <ElevationChart points={points} />\n\n          <h3 className=\"el-text mt-3\">Pace</h3>\n          <PaceChart points={points} />   \n\n          <h3 className=\"el-text mt-3\">Splits</h3>\n          <SplitsChart points={points} />        \n        </div>\n      ) : <Loading />}\n    </div>\n  )\n}\n\nexport { DetailedActivityContainer as DetailedActivity };","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { ActivityService } from './ActivityService';\nimport { Loading } from '../Shared';\n\nexport const Upload = () => {\n  const history = useHistory();\n  \n  const [loading, setLoading] = useState<boolean>(false);\n  const [file, setFile] = useState<File>();\n\n  function handleFileInput(event: React.ChangeEvent<HTMLInputElement>) {\n    const uploadedFile = event.target.files?.item(0);\n\n    if (uploadedFile) {\n      setFile(uploadedFile);\n    }\n  }\n\n  async function handleSubmit() {\n    if (file) {\n      setLoading(true);\n      await ActivityService.upload(file);\n      setLoading(false);\n      history.push('/activities');\n    }\n  }\n\n  return (\n    <div className=\"upload-container\">\n      <div className=\"upload\">\n        <p id=\"inputGroupFileAddon01\" className=\"h2\">Upload</p>\n        \n        <p>Accepted file types: '.gpx'</p>\n        <div className=\"form-file\">\n          <input\n            type=\"file\"\n            name=\"file\"\n            id=\"fileInput\"\n            className=\"form-file-input\"\n            onChange={handleFileInput}\n          />\n          \n          <label className=\"form-file-label\" htmlFor=\"fileInput\">\n            <span\n              className=\"form-file-text\"\n            >\n              {file ? file.name : 'Select a GPX file to upload' }\n            </span>\n            <span className=\"form-file-button\">Browse</span>\n          </label>\n        </div>\n        \n        <div className=\"upload-actions\">\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-secondary back\"\n            onClick={() => history.push('/activities')}\n          >Go Back</button>\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={handleSubmit}\n            disabled={!file}\n          >Submit</button>\n        </div>\n        { loading && <Loading /> }\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport {\n  Switch,\n  Route,\n  useRouteMatch,\n  HashRouter\n} from 'react-router-dom';\n\nimport './App.scss';\nimport './styles/styles.scss';\n\nimport { \n  DetailedActivity,\n  ActivityList,\n  Upload\n} from './Activities';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"content-wrapper\">\n        <Switch>\n          <Route path='/activities'>\n            <Activities />\n          </Route>\n          <Route path='/' exact>\n            <Activities />\n          </Route>\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nconst Activities = () => {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route exact path={path}>\n        <ActivityList />\n      </Route>\n      <Route path={`${path}/upload`}>\n        <Upload />\n      </Route>\n      <Route path={`${path}/:activityId`}>\n        <DetailedActivity />\n      </Route>\n    </Switch>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}